// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
// Modelo Usuario
// Información del usuario
model User {
  id              Int           @id @default(autoincrement())
  name            String
  email           String        @unique
  password        String
  role            String        @default("USER")
  status          String        @default("ACTIVE") // ACTIVE, SUSPENDED, BLOCKED
  walletId        String        @unique // Identificador único de wallet
  phoneNumber     String?       @unique
  twoFactorEnabled Boolean      @default(false)
  lastLogin       DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relaciones
  wallet          Wallet?
  transactions    Transaction[]
  reports         Report[]
  conversions     Conversion[]
  securityLogs    SecurityLog[]
  notifications   Notification[]
}

// Wallet del usuario
model Wallet {
  id              Int           @id @default(autoincrement())
  balance         Float         @default(0)
  userId          Int           @unique
  user            User          @relation(fields: [userId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relaciones
  balances        WalletBalance[]
}

// Balance por criptomoneda
model WalletBalance {
  id               Int            @id @default(autoincrement())
  walletId         Int
  wallet           Wallet         @relation(fields: [walletId], references: [id])
  cryptocurrencyId Int
  cryptocurrency   Cryptocurrency  @relation(fields: [cryptocurrencyId], references: [id])
  balance          Float          @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([walletId, cryptocurrencyId])
}

// Modelo Criptomoneda (expandido)
model Cryptocurrency {
  id                     Int                @id @default(autoincrement())
  symbol                 String             @unique
  name                   String
  marketValue            Float
  priceChangePercent24h  Float?
  volume24h              Float?
  marketCap             Float?
  isActive              Boolean            @default(true)
  logoUrl               String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  // Relaciones
  walletBalances         WalletBalance[]
  originTransactions     Transaction[]      @relation("OriginCurrency")
  destinationTransactions Transaction[]    @relation("DestinationCurrency")
  priceHistory          CryptoPriceHistory[]
  originConversions      Conversion[]       @relation("OriginConversionCurrency")
  destinationConversions Conversion[]       @relation("DestinationConversionCurrency")
}

// Historial de precios de criptomonedas
model CryptoPriceHistory {
  id               Int            @id @default(autoincrement())
  cryptocurrencyId Int
  cryptocurrency   Cryptocurrency @relation(fields: [cryptocurrencyId], references: [id])
  price            Float
  volume           Float?
  timestamp        DateTime       @default(now())

  @@index([cryptocurrencyId, timestamp])
}

// Modelo Transacción (mejorado)
model Transaction {
  id                    Int                @id @default(autoincrement())
  type                  String             // DEPOSIT, WITHDRAWAL, EXCHANGE, TRANSFER
  status                String             // PENDING, COMPLETED, FAILED, CANCELLED
  amount                Float
  fee                   Float              @default(0)
  date                  DateTime           @default(now())
  exchangeRate          Float
  description          String?
  referenceId          String?            // ID externo de referencia
  originCurrencyId      Int
  destinationCurrencyId Int
  userId                Int

  // Relaciones
  originCurrency        Cryptocurrency     @relation("OriginCurrency", fields: [originCurrencyId], references: [id])
  destinationCurrency   Cryptocurrency     @relation("DestinationCurrency", fields: [destinationCurrencyId], references: [id])
  user                  User               @relation(fields: [userId], references: [id])

  @@index([userId, date])
  @@index([status])
}

// Registro de seguridad
model SecurityLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  action      String   // LOGIN, WITHDRAWAL, 2FA_ENABLED, PASSWORD_CHANGED, etc.
  ipAddress   String?
  userAgent   String?
  status      String   // SUCCESS, FAILED
  details     String?
  createdAt   DateTime @default(now())

  @@index([userId, createdAt])
}

// Notificaciones
model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  type        String   // TRANSACTION, SECURITY, SYSTEM, PRICE_ALERT
  title       String
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId, isRead])
}

// Modelo Reporte (mejorado)
model Report {
  id                 Int      @id @default(autoincrement())
  type               String   // TRANSACTION_HISTORY, PORTFOLIO_PERFORMANCE, TAX_REPORT
  format             String   // PDF, CSV, EXCEL
  graphType          String   @default("LINE")
  transactionVolume  Int
  startDate          DateTime
  endDate            DateTime
  status             String   // GENERATING, COMPLETED, FAILED
  downloadUrl        String?
  userId             Int
  user               User     @relation(fields: [userId], references: [id])
  createdAt          DateTime @default(now())
}

// Modelo Conversión (mejorado)
model Conversion {
  id                     Int                @id @default(autoincrement())
  amount                 Float
  fee                    Float              @default(0)
  exchangeRate           Float
  status                 String             // PENDING, COMPLETED, FAILED
  originCurrencyId       Int
  destinationCurrencyId  Int
  userId                 Int
  result                 Float
  createdAt             DateTime           @default(now())

  // Relaciones
  originCurrency         Cryptocurrency     @relation("OriginConversionCurrency", fields: [originCurrencyId], references: [id])
  destinationCurrency    Cryptocurrency     @relation("DestinationConversionCurrency", fields: [destinationCurrencyId], references: [id])
  user                   User               @relation(fields: [userId], references: [id])
}